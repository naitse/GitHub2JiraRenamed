<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:github="http://www.mulesoft.org/schema/mule/github" xmlns:context="http://www.springframework.org/schema/context" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:jira="http://www.mulesoft.org/schema/mule/jira" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:debugger="http://www.mulesoft.org/schema/mule/debugger" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="EE-3.3.0" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/github http://www.mulesoft.org/schema/mule/github/1.0/mule-github.xsd 
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd 
http://www.mulesoft.org/schema/mule/jira http://www.mulesoft.org/schema/mule/jira/2.0/mule-jira.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd 
http://www.mulesoft.org/schema/mule/debugger http://www.mulesoft.org/schema/mule/debugger/current/mule-debugger.xsd 
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd ">
    <context:property-placeholder location="mule.${mule.env}.properties"/>
    <github:config name="Github" user="${git.username}" password="${git.password}" doc:name="Github"/>
    <jira:config name="Jira" connectionUser="${jira.username}" connectionPassword="${jira.password}" connectionAddress="${jira.connectionAddress}" doc:name="Jira"/>
    <flow name="jira.close.GiHubIssues" doc:name="jira.close.GiHubIssues">
        <poll frequency="${poll.frequency}">
            <jira:get-issues-from-jql-search config-ref="Jira" jqlSearch="${jira.getClosedIssues.jql}" maxNumResults="1000" doc:name="Jira"/>
        </poll>
        <foreach doc:name="Foreach">
            <message-properties-transformer overwrite="true" scope="session" doc:name="persist resolution">
                <add-message-property key="jiraIssueResolution" value="#[groovy:payload.resolution]"/>
            </message-properties-transformer>
            <foreach collection="payload.customFieldValues" doc:name="customFieldValues">
                <choice doc:name="Choice">
                    <when expression="groovy:payload.customfieldId.equals('${git.customField.repoName}')">
                        <processor-chain>
                            <message-properties-transformer overwrite="true" scope="session" doc:name="persist issue2closeRepoName">
                                <add-message-property key="issue2CloseRepoName" value="#[groovy:payload.values[0]]"/>
                            </message-properties-transformer>
                        </processor-chain>
                    </when>
                    <when expression="groovy:payload.customfieldId.equals('${git.customField.gitIssueId}')">
                        <processor-chain>
                            <message-properties-transformer overwrite="true" scope="session" doc:name="persist issue2CloseGitIssueId">
                                <add-message-property key="issue2CloseGitIssueId" value="#[groovy:payload.values[0]]"/>
                            </message-properties-transformer>
                        </processor-chain>
                    </when>
                    <otherwise>
                        <processor-chain>
                            <logger message="just the other customfield" level="DEBUG" doc:name="Logger"/>
                        </processor-chain>
                    </otherwise>
                </choice>
            </foreach>
            <github:get-issue config-ref="Github" issueId="#[groovy:message.getSessionProperty('issue2CloseGitIssueId')]" repository="#[groovy:message.getSessionProperty('issue2CloseRepoName')]" user="${git.orgName}" doc:name="GetIssue"/>
            <choice doc:name="Choice">
                <when expression="groovy:!payload.state.equals('closed')">
                    <processor-chain>
                        <scripting:component doc:name="Groovy">
                            <scripting:script engine="Groovy" file="clossingComment.groovy"/>
                        </scripting:component>
                        <github:create-comment config-ref="Github" comment="#[payload]" issueId="#[groovy:message.getSessionProperty('issue2CloseGitIssueId')]" repository="#[groovy:message.getSessionProperty('issue2CloseRepoName')]" user="${git.orgName}" doc:name="Create Github comment"/>
                        <logger message="[COMMENTED] at issue #[groovy:message.getSessionProperty('issue2CloseGitIssueId')] from repo #[groovy:message.getSessionProperty('issue2CloseRepoName')]" level="INFO" doc:name="Log the comment creation"/>
                        <github:close-issue config-ref="Github" issueId="#[groovy:message.getSessionProperty('issue2CloseGitIssueId')]" repository="#[groovy:message.getSessionProperty('issue2CloseRepoName')]" user="${git.orgName}" doc:name="Close Github Issue"/>
                        <logger message="[CLOSED] issue #[groovy:message.getSessionProperty('issue2CloseGitIssueId')] from repo #[groovy:message.getSessionProperty('issue2CloseRepoName')]" level="INFO" doc:name="Log the close event"/>
                    </processor-chain>
                </when>
                <otherwise>
                    <processor-chain>
                        <logger message="[ALREADY CLOSED] issue #[groovy:message.getSessionProperty('issue2CloseGitIssueId')] from repo #[groovy:message.getSessionProperty('issue2CloseRepoName')]" level="INFO" doc:name="Logger"/>
                    </processor-chain>
                </otherwise>
            </choice>
        </foreach>
        <flow-ref name="jira.sync.issues" doc:name="Start sync issues"/>
    </flow>
    <flow name="jira.sync.issues" doc:name="jira.sync.issues">
        <logger message="[STARTING SYNC...]" level="INFO" doc:name="Logger"/>
        <github:get-org-repositories config-ref="Github" organization="${git.orgName}" doc:name="Get Github repos"/>
        <enricher target="#[variable:jiraComponents]" doc:name="Message Enricher">
            <jira:get-components config-ref="Jira" projectKey="CLDCONNECT" doc:name="Get Jira Components"/>
        </enricher>
        <message-properties-transformer scope="invocation" doc:name="load values from .properties">
            <add-message-property key="gitRepoFilterPattern" value="${git.repoFilter.pattern}"/>
            <add-message-property key="defaultRepoId" value="${git.defaultRepo.id}"/>
            <add-message-property key="defaultRepoName" value="${git.defaultRepo.name}"/>
            <add-message-property key="gitExternalReposFlag" value="${git.externalRepos}"/>
            <add-message-property key="gitExternalRepoCsv" value="${git.externalRepo.csv}"/>
        </message-properties-transformer>
        <scripting:component doc:name="Filter GitHub Repos">
            <scripting:script engine="Groovy" file="filterRepos.groovy"/>
        </scripting:component>
        <foreach doc:name="Foreach GitHub repo">
            <message-properties-transformer overwrite="true" scope="invocation" doc:name="Persist gitRepoName">
                <add-message-property key="gitRepoName" value="#[payload:]"/>
            </message-properties-transformer>
            <github:get-issues config-ref="Github" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" user="${git.orgName}" doc:name="Get all the issues of the given GitHub repo name"/>
            <choice doc:name="Choice">
                <when expression="payload.size() &gt; 0">
                    <processor-chain>
                        <foreach doc:name="Foreach Issue at GitHub">
                            <message-properties-transformer overwrite="true" scope="invocation" doc:name="Persist gitIssueId &amp; gitCommentsAmount">
                                <add-message-property key="gitIssueId" value="#[groovy:payload.getNumber()]"/>
                                <add-message-property key="gitIssueComments" value="#[groovy:payload.comments]"/>
                            </message-properties-transformer>
                            <enricher target="#[variable:matchingJiraIssues]" doc:name="poll">
                                <jira:get-issues-from-jql-search config-ref="Jira" jqlSearch="${jira.getIssues.jql}" maxNumResults="1000" doc:name="Query Jira in order to see if the GitHub issue is already at Jira"/>
                            </enricher>
                            <choice doc:name="Choice">
                                <when expression="groovy:message.getInvocationProperty('matchingJiraIssues').isEmpty()">
                                    <processor-chain>
                                        <scripting:component doc:name="see if there is a component at Jira">
                                            <scripting:script engine="Groovy" file="matchComponents.groovy"/>
                                        </scripting:component>
                                        <flow-ref name="jira.create.issue" doc:name="create issue"/>
                                    </processor-chain>
                                </when>
                                <otherwise>
                                    <processor-chain>
                                        <logger message="[ALREADY ON JIRA] github repo: #[groovy:message.getInvocationProperty('gitRepoName')], github issue: #[groovy:message.getInvocationProperty('gitIssueId')]" level="INFO" doc:name="Logger"/>
                                        <flow-ref name="jira.sync.comments" doc:name="sync comments"/>
                                    </processor-chain>
                                </otherwise>
                            </choice>
                        </foreach>
                    </processor-chain>
                </when>
                <otherwise>
                    <processor-chain>
                        <logger message="[NO NEW ISSUES] at github repo: #[groovy:message.getInvocationProperty('gitRepoName')]" level="INFO" doc:name="Logger"/>
                    </processor-chain>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    <flow name="jira.create.issue" doc:name="jira.create.issue" processingStrategy="synchronous">
        <logger message="[creating] JIRA for  #[groovy:message.getInvocationProperty('gitRepoName')], issue number #[groovy:payload.getNumber()]" level="INFO" doc:name="Logger"/>
        <jira:create-issue-single-value-fields config-ref="Jira" priority="6" componentId="#[groovy:message.getInvocationProperty('componentId')]" componentName="#[groovy:message.getInvocationProperty('componentName')]" summary="#[groovy:payload.getTitle()]" description="*Created by #[groovy:payload.user.login]*, at #[groovy:payload.createdAt] \\ \\ #[groovy:payload.getBody()]" project="CLDCONNECT" type="1" doc:name="JiraCreateIssue">
            <jira:custom-fields>
                <jira:custom-field key="${git.customField.gitIssueId}">#[groovy:payload.getNumber().toString()]</jira:custom-field>
                <jira:custom-field key="${git.customField.repoName}">#[groovy:message.getInvocationProperty('gitRepoName')]</jira:custom-field>
                <jira:custom-field key="${jira.customField.connectorType}">Community</jira:custom-field>
            </jira:custom-fields>
        </jira:create-issue-single-value-fields>
        <logger message="[CREATED] Jira issue created, JiraIsuue: #[groovy:payload.key] from GitRepo: #[groovy:message.getInvocationProperty('gitRepoName')] at JiraComponent: #[groovy:message.getInvocationProperty('componentName')]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="groovy:message.getInvocationProperty('gitIssueComments') &gt; 0">
                <processor-chain>
                    <message-properties-transformer overwrite="true" scope="invocation" doc:name="Persist jiraIssueKey">
                        <add-message-property key="jiraIssueKey" value="#[groovy:payload.key]"/>
                    </message-properties-transformer>
                    <github:get-comments config-ref="Github" issueId="#[groovy:message.getInvocationProperty('gitIssueId')]" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" user="${git.orgName}" doc:name="get GithubIssue comments"/>
                    <foreach doc:name="Foreach GitHub comment">
                        <flow-ref name="jira.add.comment" doc:name="jira.add.comment"/>
                    </foreach>
                </processor-chain>
            </when>
            <otherwise>
                <processor-chain>
                    <logger message="[NO COMMENTS] at github for issue: #[groovy:message.getInvocationProperty('jiraIssueKey')]" level="INFO" doc:name="Logger"/>
                </processor-chain>
            </otherwise>
        </choice>
    </flow>
    <flow name="jira.add.comment" doc:name="jira.add.comment" processingStrategy="synchronous">
        <scripting:component doc:name="Format the comment">
            <scripting:script engine="groovy">
                <scripting:text><![CDATA[def body = payload.id +" | Commenter: *" + payload.user.login + "* | Created at: " + payload.createdAt + "\n \n" + payload.body
					return payload = body]]></scripting:text>
            </scripting:script>
        </scripting:component>
        <logger message="[creating comment] at Jira Issue: #[groovy:message.getInvocationProperty('jiraIssueKey')]" level="INFO" doc:name="Logger"/>
        <jira:add-comment config-ref="Jira" commentAuthor="testCommenter" commentBody="#[payload:]" issueKey="#[groovy:message.getInvocationProperty('jiraIssueKey')]" doc:name="Add the comment"/>
        <logger message="[COMMENT CREATED] at Jira Issue: #[groovy:message.getInvocationProperty('jiraIssueKey')]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="jira.sync.comments" doc:name="jira.sync.comments" processingStrategy="synchronous">
        <logger message="start sync comments:  #[groovy:message.getInvocationProperty('matchingJiraIssues')[0].key]" level="DEBUG" doc:name="Logger"/>
        <message-properties-transformer overwrite="true" scope="invocation" doc:name="Persist jiraIssueKey">
            <add-message-property key="jiraIssueKey" value="#[groovy:message.getInvocationProperty('matchingJiraIssues')[0].key]"/>
        </message-properties-transformer>
        <enricher target="#[variable:jiraIssueComments]" doc:name="Query Jira in order to get the amount of comments in the issue">
            <jira:get-comments config-ref="Jira" issueKey="#[groovy:message.getInvocationProperty('jiraIssueKey')]" doc:name="Jira"/>
        </enricher>
        <logger message="jiraIssueComments: #[groovy:message.getInvocationProperty('jiraIssueComments').size()]" level="DEBUG" doc:name="Logger"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy">
                <scripting:text><![CDATA[def i= 0;
if (message.getInvocationProperty('jiraIssueComments').size() != 0){
	for(jiraComment in message.getInvocationProperty('jiraIssueComments')){
	if(jiraComment.body.contains('| Commenter:')){
		i++
	}
   }
 }

return (String) i;]]></scripting:text>
            </scripting:script>
        </scripting:component>
        <choice doc:name="Choice">
            <when expression="groovy:!payload.equals(message.getInvocationProperty('gitIssueComments'))">
                <processor-chain>
                    <github:get-comments config-ref="Github" issueId="#[groovy:message.getInvocationProperty('gitIssueId')]" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" user="${git.orgName}" doc:name="Get Github comments"/>
                    <foreach doc:name="Foreach">
                        <scripting:component doc:name="Groovy">
                            <scripting:script engine="Groovy" file="commentsValidator.groovy"/>
                        </scripting:component>
                        <choice doc:name="Choice">
                            <when expression="groovy:message.getInvocationProperty('commentExists').isEmpty()">
                                <processor-chain>
                                    <flow-ref name="jira.add.comment" doc:name="add comment"/>
                                    <logger message="comments synched" level="INFO" doc:name="Logger"/>
                                </processor-chain>
                            </when>
                            <otherwise>
                                <processor-chain>
                                    <logger message="No new comments at GitHub" level="DEBUG" doc:name="Logger"/>
                                </processor-chain>
                            </otherwise>
                        </choice>
                    </foreach>
                </processor-chain>
            </when>
            <otherwise>
                <processor-chain>
                    <logger message="No New Comments" level="DEBUG" doc:name="Logger"/>
                </processor-chain>
            </otherwise>
        </choice>
    </flow>
</mule>
