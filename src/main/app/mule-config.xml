<?xml version="1.0" encoding="UTF-8"?>

<mule  
xmlns:debugger="http://www.mulesoft.org/schema/mule/debugger" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:json="http://www.mulesoft.org/schema/mule/json" 
xmlns:github="http://www.mulesoft.org/schema/mule/github" 
xmlns:jira="http://www.mulesoft.org/schema/mule/jira" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:spring="http://www.springframework.org/schema/beans" 
xmlns:core="http://www.mulesoft.org/schema/mule/core" 
xmlns:script="http://www.mulesoft.org/schema/mule/scripting" 
xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:context="http://www.springframework.org/schema/context"
version="CE-3.2.1" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd 
http://www.mulesoft.org/schema/mule/github http://www.mulesoft.org/schema/mule/github/1.0/mule-github.xsd 
http://www.mulesoft.org/schema/mule/jira http://www.mulesoft.org/schema/mule/jira/2.0/mule-jira.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd 
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/debugger http://www.mulesoft.org/schema/mule/debugger/current/mule-debugger.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
 ">
 
	<context:property-placeholder location="mule.${mule.env}.properties" />
	<github:config name="Github" user="${git.username}" password="${git.password}" doc:name="Github" />
	<jira:config name="Jira" connectionUser="${jira.username}" connectionPassword="${jira.password}" connectionAddress="${jira.connectionAddress}" doc:name="Jira" />

	<flow name="GithubIssues2Jira" doc:name="Get all GitHub repos for the specified org">
		<poll frequency="1800000">
			<github:get-org-repositories organization="mulesoft" />
		</poll>
		<enricher target="#[variable:jiraComponents]" doc:name="Message Enricher">
            <jira:get-components config-ref="Jira" projectKey="CLDCONNECT"/>
        </enricher>
        <message-properties-transformer scope="invocation" doc:name="Message Properties">
			<add-message-property key="gitRepoFilterPattern" value="${git.repoFilter.pattern}" />
			<add-message-property key="defaultRepoId" value="${git.defaultRepo.id}" />
			<add-message-property key="defaultRepoName" value="${git.defaultRepo.name}" />
			<add-message-property key="gitExternalReposFlag" value="${git.externalRepos}" />
			<add-message-property key="gitExternalRepoCsv" value="${git.externalRepo.csv}"/>
		</message-properties-transformer>
		
<!-- 		Filter all non connector repos using a configurable Pattern and add aditional repos fron a list defined by the user -->
		<script:component>
		    <script:script file="filterRepos.groovy"/>
		</script:component>

		<collection-splitter doc:name="Iterate over the collection of filtered GitHub repo names" />
			<message-properties-transformer scope="invocation" doc:name="Message Properties">
				<add-message-property key="gitRepoName" value="#[payload:]" />
			</message-properties-transformer>
			<github:get-issues config-ref="Github" user="mulesoft" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" doc:name="Get all the issues of the given GitHub repo name" />
			<choice doc:name="hasIssues">
				<when expression="payload.size() > 0" evaluator="groovy">
					<collection-splitter />
						<message-properties-transformer scope="invocation" doc:name="Message Properties">
							<add-message-property key="gitIssueId" value="#[groovy:payload.getNumber()]" />
							<add-message-property key="gitIssueComments" value="#[groovy:payload.comments]" />
						</message-properties-transformer>
						<enricher target="#[variable:matchingJiraIssues]" doc:name="Query Jira in order to see if the GitHub issue is already at Jira">
							<jira:get-issues-from-jql-search config-ref="Jira" jqlSearch="${jira.getIssues.jql}" maxNumResults="1000" doc:name="Jira" />
						</enricher>
						<choice doc:name="If the issue is not already on Jira, create one">
							<when expression="message.getInvocationProperty('matchingJiraIssues').isEmpty()" evaluator="groovy">
							
	<!-- 						see if the GitHub repo is at Jira, if not assign a default component to the Jira issue -->
								<script:component>
								    <script:script file="matchComponents.groovy"/>
								</script:component>
								<flow-ref name="jira.create.issue"/>
							</when>
							<otherwise>
<!-- 								Update comments from github to Jira -->
					           	<flow-ref name="jira.sync.comments"/>	
								<logger message="issue already on jira, from github repo: #[groovy:message.getInvocationProperty('gitRepoName')], github issue: #[groovy:message.getInvocationProperty('gitIssueId')]" level="INFO" />
							</otherwise>
						</choice>
				</when>
				<otherwise>
					<logger message="No New Issues at github repo: #[groovy:message.getInvocationProperty('gitRepoName')]" level="INFO" doc:name="Logger" />
				</otherwise>
			</choice>
    </flow>
    
    <flow name="CloseGithubIssues">
   		<jira:get-issues-from-jql-search config-ref="Jira" jqlSearch="${jira.closeGithubIssues.jql}" maxNumResults="1000" doc:name="Jira"/>
		<collection-splitter />
			<github:get-issues config-ref="Github" user="mulesoft" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" doc:name="Get all the issues of the given GitHub repo name" />
   		
    </flow>
    
    
    
    
    <flow name="jira.create.issue" processingStrategy="synchronous">
    
    	<logger level="INFO" message="Creating JIRA for  #[groovy:message.getInvocationProperty('gitRepoName')], issue number #[groovy:payload.getNumber()]" />
	    <jira:create-issue-single-value-fields config-ref="Jira" summary="#[groovy:payload.getTitle()]" priority="6" description="*Created at #[groovy:payload.createdAt]* \\ \\ #[groovy:payload.getBody()]" project="CLDCONNECT" type="1" componentName="#[groovy:message.getInvocationProperty('componentName')]" componentId="#[groovy:message.getInvocationProperty('componentId')]" doc:name="JiraCreateIssue">
			<jira:custom-fields>
				<jira:custom-field key="${git.customField.gitIssueId}">#[groovy:payload.getNumber().toString()]</jira:custom-field>
				<jira:custom-field key="${git.customField.repoName}">#[groovy:message.getInvocationProperty('gitRepoName')]</jira:custom-field>
				<jira:custom-field key="${jira.customField.connectorType}">Community</jira:custom-field>				
			</jira:custom-fields>
		</jira:create-issue-single-value-fields>
		<logger message="Jira issue created, JiraIsuue: #[groovy:payload.key] from GitRepo: #[groovy:message.getInvocationProperty('gitRepoName')] at JiraComponent: #[groovy:message.getInvocationProperty('componentName')]" level="INFO" />
		<choice doc:name="if the GitHub issue has comments add them to the Jira issue">
			<when evaluator="groovy" expression="message.getInvocationProperty('gitIssueComments') > 0">
				<message-properties-transformer scope="invocation" doc:name="Message Properties">
					<add-message-property key="jiraIssueKey" value="#[groovy:payload.key]" />
				</message-properties-transformer>
				<github:get-comments config-ref="Github" user="mulesoft" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" issueId="#[groovy:message.getInvocationProperty('gitIssueId')]"/>
				<collection-splitter/>
					<flow-ref name="jira.add.comment"/>
			</when>
			<otherwise>
				<logger message="no comments for issue: #[groovy:message.getInvocationProperty('jiraIssueKey')]" level="INFO" />
			</otherwise>
		</choice>    
    </flow>
    
    
    
    
    <flow name="jira.add.comment" processingStrategy="synchronous">
		<script:component>
			<script:script engine="groovy">
				<script:text>
					def body = payload.id +" | Commenter: *" + payload.user.login + "* | Created at: " + payload.createdAt + "\n \n" + payload.body
					return payload = body
				</script:text>
			</script:script>
		</script:component>
		<jira:add-comment config-ref="Jira" issueKey="#[groovy:message.getInvocationProperty('jiraIssueKey')]" commentAuthor="testCommenter" commentBody="#[payload:]"/>
		<logger message="comment added to Jira Issue: #[groovy:message.getInvocationProperty('jiraIssueKey')]" level="INFO" />
    </flow>
    
 
 
 
 
 	<flow name="jira.sync.comments" processingStrategy="synchronous">
 		<logger message="start sync comments:  #[groovy:message.getInvocationProperty('matchingJiraIssues')[0].key]" level="DEBUG" doc:name="Logger" />
		<message-properties-transformer scope="invocation" doc:name="Message Properties">
			<add-message-property key="jiraIssueKey" value="#[groovy:message.getInvocationProperty('matchingJiraIssues')[0].key]" />
		</message-properties-transformer>
		<enricher target="#[variable:jiraIssueComments]" doc:name="Query Jira in order to get the amount of comments in the issue">
           <jira:get-comments issueKey="#[groovy:message.getInvocationProperty('jiraIssueKey')]"/>
		</enricher>
		<logger message="jiraIssueComments: #[groovy:message.getInvocationProperty('jiraIssueComments').size()]" level="DEBUG" doc:name="Logger" />
		<choice doc:name="">
			<when evaluator="groovy" expression="!message.getInvocationProperty('jiraIssueComments').size().equals(message.getInvocationProperty('gitIssueComments'))">
			<github:get-comments config-ref="Github" user="mulesoft" repository="#[groovy:message.getInvocationProperty('gitRepoName')]" issueId="#[groovy:message.getInvocationProperty('gitIssueId')]"/>
		<collection-splitter/>
			<script:component>
			    <script:script file="commentsValidator.groovy"/>
			</script:component>
			<choice doc:name="">
				<when evaluator="groovy" expression="message.getInvocationProperty('commentExists').isEmpty()">
					<flow-ref name="jira.add.comment"/>
					<logger message="comments synched" level="INFO" />
				</when>
				<otherwise>
					<logger message="No new comments at GitHub" level="DEBUG" />
				</otherwise>
			</choice>
			</when>
			<otherwise>
				<logger message="No New Comments" level="DEBUG" doc:name="Logger" />
			</otherwise>
		</choice>
 	</flow>
 
</mule>

					

<!-- 							<choice doc:name=""> -->
<!-- 								<when evaluator="" expression=""> -->
<!-- 								</when> -->
<!-- 								<otherwise> -->
<!-- 								</otherwise> -->
<!-- 							</choice> -->

<!-- 				           <script:component> -->
<!-- 					           <script:script engine="groovy"> -->
<!-- 					                    <script:text> -->
<!-- 					                    </script:text> -->
<!-- 					           </script:script> -->
<!-- 				           </script:component> -->